"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
# import environ
from typing import Dict, Any, Union
from general_types.labelsdictionaries import MQTTLabelsConfigurations
from kombu import Exchange, Queue

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#ROOT_DIR = environ.Path(__file__) - 3 #project
#APPS_DIR = ROOT_DIR.path('project') # path for django apps

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.gis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_gis',
    'api',
    'jobs',
    'shared',
    'users'
]

AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shared.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'shared.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

HEADER_JSON = { 'Content-Type' : 'application/json' }

# Rabbitmq configuration
# ToDO: Create your account in RABBIT container
BROKER_URL = 'pyamqp://{user}:{password}@{hostname}/{vhost}'.format(
    user=os.environ.get('RABBITMQ_DEFAULT_USER', ''),
    password=os.environ.get('RABBITMQ_DEFAULT_PASS', ''),
    hostname=os.environ.get('RABBITMQ_HOSTNAME', '172.18.1.2'),
    vhost=os.environ.get('RABBITMQ_DEFAULT_VHOST', ''))

BROKER_USER_URL = 'pyamqp://monica_guest:5LSeufD4P5xpu9OybT8S@rabbit/'

# We don't want to have dead connections stored on rabbitmq, so we have to negotiate using heartbeats
BROKER_HEARTBEAT = '?heartbeat=30'
if not BROKER_URL.endswith(BROKER_HEARTBEAT):
    BROKER_URL += BROKER_HEARTBEAT

BROKER_POOL_LIMIT = 1
BROKER_CONNECTION_TIMEOUT = 10

# SCHUDULES TIME VALUE
TASK_ELABORATION_TIME = 30.0    #in secs
TASK_PROVISIONING = 60.0        #in secs

# QUEUES NAMES
CROWD_HEATMAP_NAME = 'crowd_heatmap_queue'


# Celery configuration
# configure queues, currently we have only one
default_exchange = Exchange('default', type='direct')
priority_exchange = Exchange('priority_queue', type='direct')
broker_exchange = Exchange('broker_queue', type='direct')
log_exchange = Exchange('log_queue', type='direct')
#checkdb_exchange = Exchange('check_db', type='direct')
crowd_queue_exchange = Exchange('crowd_queue_elaboration', type='direct')
task_alive_exchange = Exchange('queue_task_alive', type='direct')
discover_devices_exchange = Exchange('queue_sw_update_info', type='direct')
crowd_queue_provisioning_exchange = Exchange('crowd_queue_provisioning', type='direct')
hldf_output_exchange = Exchange('hldf_output_queue', type='direct')
#CROWD_HEATMAP_EXCHANGE = Exchange(CROWD_HEATMAP_NAME, type='topic', durable=True)

CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = "UTC"

CELERY_QUEUES = (
    Queue('default', exchange=default_exchange, routing_key='default', consumer_arguments={'x-priority': 2}),
    Queue('crowd_queue_elaboration', exchange=crowd_queue_exchange, routing_key='crowd_queue_elaboration', consumer_arguments={'x-priority': 3}),
    Queue('queue_sw_update_info', exchange=discover_devices_exchange, routing_key='queue_sw_update_info', consumer_arguments={'x-priority': 1}),
    Queue('crowd_queue_provisioning', exchange=crowd_queue_provisioning_exchange, routing_key='crowd_queue_provisioning', consumer_arguments={'x-priority': 2}),
    Queue('queue_task_alive', exchange=task_alive_exchange, routing_key='queue_task_alive', consumer_arguments={'x-priority': 1}),
    Queue('priority_queue', exchange=priority_exchange, routing_key='priority_queue', consumer_arguments={'x-priority': 1}),
    Queue('broker_queue', exchange=broker_exchange, routing_key='broker_queue', consumer_arguments={'x-priority': 5}),
    Queue('log_queue', exchange=log_exchange, routing_key='log_queue', consumer_arguments={'x-priority': 7}),
    Queue('hldf_output_queue', exchange=hldf_output_exchange, routing_key='hldf_output_queue', consumer_arguments={'x-priority': 4}),
)

CELERY_DEFAULT_QUEUE = 'default'
CELERY_DEFAULT_EXCHANGE = 'default'
CELERY_DEFAULT_ROUTING_KEY = 'default'

CELERY_ROUTES = ({'app.jobs.tasks.first': {
                    'queue': 'priority_queue',
                    'routing_key': 'priority_queue'
                 }},
                 {'app.jobs.tasks.broker_connection': {
                     'queue': 'broker_queue',
                     'routing_key': 'broker_queue'
                 }},
                 {'app.jobs.tasks.save_logs': {
                    'queue': 'log_queue',
                    'routing_key': 'log_queue'
                 }},
                 {'app.jobs.tasks.task_elaboration': {
                     'queue': 'crowd_queue_elaboration',
                     'routing_key': 'crowd_queue_elaboration'
                 }},
                 {'app.jobs.tasks.task_provisioning': {
                     'queue': 'crowd_queue_provisioning',
                     'routing_key': 'crowd_queue_provisioning'
                 }},
                 {'app.jobs.tasks.task_sw_update_info': {
                     'queue': 'queue_sw_update_info',
                     'routing_key': 'queue_sw_update_info'
                 }},
                {'app.jobs.tasks.task_alive': {
                    'queue': 'queue_task_alive',
                    'routing_key': 'queue_task_alive'
                }}
)

CELERY_CREATE_MISSING_QUEUES = True

# Sensible settings for celery
# CELERY_TASK_ALWAYS_EAGER = True
# CELERY_ACKS_LATE = True
# CELERYD_PREFETCH_MULTIPLIER = 1
# CELERY_TASK_PUBLISH_RETRY = True
# CELERY_DISABLE_RATE_LIMITS = False
# CELERY_EAGER_PROPAGATES_EXCEPTIONS = True
# CELERY_RDB_HOST = 6900

# By default we will ignore result
# If you want to see results and try out tasks interactively, change it to False
# Or change this setting on tasks level
# CELERY_IGNORE_RESULT = True
# CELERY_SEND_TASK_ERROR_EMAILS = False
# CELERY_TASK_RESULT_EXPIRES = 600

# Set redis as celery result backend
# CELERY_RESULT_BACKEND = 'redis://%s:%d/%d' % (REDIS_HOST, REDIS_PORT, REDIS_DB)  
# CELERY_REDIS_MAX_CONNECTIONS = 1

# Don't use pickle as serializer, json is much safer
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['text/plain', 'json', 'application/json', 'yaml']
CELERY_RESULT_SERIALIZER = 'json' #json pickle msgpack

# CELERYD_HIJACK_ROOT_LOGGER = False
# CELERYD_PREFETCH_MULTIPLIER = 1
# CELERYD_MAX_TASKS_PER_CHILD = 1000

CELERY_IMPORTS = ('api', 'jobs',)


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(pathname)s:%(lineno)s] %(message)s',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'standard': {
            'format': "[%(asctime)s] %(levelname)s %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'logfile': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': "/logs/tracefile.log",
            'maxBytes': 10485760,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'WARN',
        },
        'django.request': {
            'handlers': ['null'],
            'propagate': False,
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['null'],
            'propagate': False,
            'level': 'INFO',
        },
        'django.template': {
            'handlers': ['null'],
            'propagate': False,
            'level': 'INFO',
        },
        'django.db.backends': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security.*': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        'textlogger': {
            'handlers': ['console', 'logfile'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}


MQTT_BROKERPROVISIONING = {
    MQTTLabelsConfigurations.LABEL_DICTIONARY_USERNAME: os.environ.get('MOSQUITTO_USERNAME', 'mosquitto'),
    MQTTLabelsConfigurations.LABEL_DICTIONARY_PASSWORD: os.environ.get('MOSQUITTO_PASSWORD', 'mosquitto'),
    MQTTLabelsConfigurations.LABEL_DICTIONARY_URL: os.environ.get('MOSQUITTO_MQTT_URL', 'mqtt'),
    MQTTLabelsConfigurations.LABEL_DICTIONARY_CLIENT_ID: os.environ.get('MOSQUITTO_CLIENTID', 'MONICA_HLDFAD'),
    MQTTLabelsConfigurations.LABEL_DICTIONARY_TOPICS:
        {
            MQTTLabelsConfigurations.LABEL_TOPICS_CROWDHEATMAPOUTPUT: 'CrowdHeatmap',
            MQTTLabelsConfigurations.LABEL_TOPICS_QUEUEDETECTIONALERT: 'QueueDetectionAlert'
        }
}
